import random
import csv
import sqlite3
from db import BotDB
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from fuzzywuzzy import fuzz
from fuzzywuzzy import process
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery

###############################################################################################
logging.basicConfig(level=logging.INFO)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="5104763927:AAEc4bkq7nWqVKzeXOu-YF_Z5SjotTZn_7w")

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# For example use simple MemoryStorage for Dispatcher.
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

str1 = []

with open("tpbook3.csv", encoding='utf-8') as r_file:
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç reader, —É–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ","
    file_reader = csv.reader(r_file, delimiter=";")
    # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –∏ –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
    count = 0
    # –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞
    for row in file_reader:
        if count == 0:
            # –í—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤
            pass
            # print(f'–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ª–±—Ü—ã: {", ".join(row)}')
        else:
            # –í—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫
            # print(f'    {row[0]} - {row[1]} - {row[2]} -.')
            str1.append(row[0] + " " + row[1] + " " + row[2] + "\n")
        count += 1

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
f = open('data/facts.txt', 'r', encoding='UTF-8')
facts = f.read().split('\n')
f.close()
# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–≥–æ–≤–æ—Ä–æ–∫
f = open('data/thinks.txt', 'r', encoding='UTF-8')
thinks = f.read().split('\n')
f.close()


def nt(str1):
    answer = random.choice(str1)
    return answer

import aiogram.utils.markdown as fmt

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–≥–æ–≤–æ—Ä–æ–∫
f = open('data/telefon.txt', 'r', encoding='UTF-8')
telf = f.read().split('\n')
f.close()

button_hi = KeyboardButton('–ü—Ä–∏–≤–µ—Ç! üëã')

greet_kb = ReplyKeyboardMarkup()
greet_kb.add(button_hi)

BotDB = BotDB('accountant.db')

from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

button_hi = KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –£–ü–¶ üëã')
button_tf = KeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –£–ü–¶')
button_an = KeyboardButton('–ê–Ω–µ–∫–¥–æ—Ç')

greet_kb = ReplyKeyboardMarkup()

greet_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button_hi).add(button_tf).add(button_an)

def keyboard(kb_config):
    _keyboard = types.InlineKeyboardMarkup()

    for rows in kb_config:
        btn = types.InlineKeyboardButton(
            callback_data=rows[0],
            text=rows[1]
        )
        _keyboard.insert(btn)

    return _keyboard


@dp.callback_query_handler()
async def callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text=callback_query.data)
    await bot.send_message(callback_query.from_user.id, text=callback_query.data)


def anekd():
    connection = sqlite3.connect('anekdot.db')
    cursor = connection.cursor()
    z = random.randrange(1, 9000, 1)
    cursor.execute('SELECT * FROM anekdot WHERE rowid=' + str(z))
    row = cursor.fetchone()
    connection.close()
    return row[1]


strupc = "–£—á–µ–±–Ω–æ-–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä ‚Äî –æ–¥–∏–Ω –∏–∑ –ª–∏–¥–µ—Ä–æ–≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –ü–ê–û ¬´–ì–∞–∑–ø—Ä–æ–º¬ª –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ " \
         "—Å–∏—Å—Ç–µ–º—ã —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞, —è–≤–ª—è–µ—Ç—Å—è —à–∫–æ–ª–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã. –í " \
         "—Å—Ç—Ä—É–∫—Ç—É—Ä–µ –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º —Ç—Ä–∞–Ω—Å–≥–∞–∑ –Æ–≥–æ—Ä—Å–∫¬ª –£—á–µ–±–Ω–æ-–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —Å 1979 –≥–æ–¥–∞. \n–í —Ü–µ–Ω—Ç—Ä–µ " \
         "–ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏, " \
         "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞, –ø—Ä–µ–¥–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è, –æ—Ü–µ–Ω–æ—á–Ω—ã–µ –∏ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ " \
         "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ–º–∏–Ω–∞—Ä—ã, –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ. "


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–≠—Ç–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –£–ü–¶.\n –≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –£–ü–¶.",
                        reply_markup=greet_kb)
    await message.reply(anekd(), reply_markup=greet_kb)
    await bot.send_photo(
        chat_id=message.from_user.id,
        photo="https://lolkot.ru/lolmixer/gallery/images/90d57bdba0f87df670914f90a858b76a1374987601.jpg",
        # reply_markup=keyboard([
        #     [message.from_user.id, "–∫–Ω–æ–ø–∫–∞1", "/f" + "–ü–ï–†", None],
        #     ["22", "–∫–Ω–æ–ø–∫–∞2", "—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", None],
        #     ["32", "–∫–Ω–æ–ø–∫–∞3", "—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", None]
        # ]),
        caption="–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –£–ü–¶. –î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –ù–∞–π—Ç–∏ –∏ –ø–æ–¥–µ—Ä–∂–∏—Ç–µ –¥–≤–µ —Å–µ–∫—É–Ω–¥—ã."
    )
@dp.message_handler(commands=['f'])
async def process_start_command(message: types.Message):
    fn = message.text
    if (message.text != ""):
        s = message.text.split()
        if (len(s) > 1):
            fn = s[1]
    await message.answer(
        fmt.text(
            fmt.text(process.extractOne(fn, str1)[0]),
            fmt.text(process.extract(fn, str1)),
            # fmt.text(process.extractOne(fn, str1[2])),
            sep="\n"
        ), parse_mode="HTML"
    )

@dp.message_handler(content_types=['text'])
async def ande1(message: types.Message):
    if (message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –£–ü–¶ üëã"):
        await message.reply(strupc, reply_markup=greet_kb)
    if (message.text == "–ê–Ω–µ–∫–¥–æ—Ç"):
        await message.reply(anekd(), reply_markup=greet_kb)
    if (message.text == "–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –£–ü–¶"):
        for i in str1:
            await message.reply(i, reply_markup=greet_kb)

@dp.message_handler(commands=['hi1'])
async def process_hi1_command(message: types.Message):
    await message.reply("–ü–µ—Ä–≤–æ–µ - –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", reply_markup=greet_kb)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message_handler(commands="test1")
async def cmd_test1(message: types.Message):
    await message.reply("Test 1")

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–ø—Ä–ø–∞–≤–ª—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç!")

@dp.message_handler()
async def echo_message(msg: types.Message):
    await bot.send_message(msg.from_user.id, msg.text)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
